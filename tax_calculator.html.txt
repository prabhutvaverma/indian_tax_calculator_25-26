<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Indian Income Tax Calculator (FY 2025-26) - Professional</title>
    <!-- Library Imports -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
            background-color: #f4f7f9;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            margin: 0;
        }
        .container {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 900px;
        }
        h1 {
            color: #1a237e;
            text-align: center;
            margin-bottom: 25px;
        }
        .calculator-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
        }
        .input-section h2, .output-section h2, .accordion-header {
            color: #3f51b5;
            border-bottom: 2px solid #e0e0e0;
            padding-bottom: 10px;
            margin-top: 15px;
        }
        .accordion-header {
            cursor: pointer;
            position: relative;
            font-size: 1.1em;
            font-weight: 600;
        }
        .accordion-header::after {
            content: '+';
            position: absolute;
            right: 10px;
            font-size: 1.2em;
            transition: transform 0.3s;
        }
        .accordion-section.active .accordion-header::after {
            transform: rotate(45deg);
        }
        .accordion-content {
            padding-top: 15px;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
        }
        .form-group {
            margin-bottom: 18px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
        }
        label {
            font-weight: 500;
            color: #555;
            flex-basis: 60%;
        }
        input[type="number"], select {
            width: 150px;
            padding: 8px 12px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 16px;
            text-align: right;
            transition: border-color 0.3s;
        }
        input[type="number"]:focus, select:focus {
            outline: none;
            border-color: #3f51b5;
        }
        .results-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        .results-table th, .results-table td {
            padding: 12px;
            text-align: right;
            border-bottom: 1px solid #eee;
        }
        .results-table th {
            background-color: #f5f5f5;
            text-align: center;
            font-weight: 600;
        }
        .results-table td:first-child {
            text-align: left;
            font-weight: 500;
        }
        .final-tax {
            font-weight: bold;
            font-size: 1.1em;
            color: #1a237e;
        }
         .refund {
            color: #4caf50;
        }
        .payable {
            color: #d32f2f;
        }
        .summary {
            margin-top: 30px;
            padding: 20px;
            background-color: #e8f5e9;
            border-left: 5px solid #4caf50;
            border-radius: 6px;
            text-align: left;
            font-size: 1.1em;
            font-weight: 500;
        }
        .summary.old-regime {
            background-color: #e3f2fd;
            border-left-color: #2196f3;
        }
        .summary-recommendation {
            text-align: center;
            font-size: 1.2em;
            margin-bottom: 15px;
        }
        .summary-suggestions, .advance-tax-alert {
            font-size: 0.9em;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #ccc;
        }
        .summary-suggestions ul, .advance-tax-alert ul {
            padding-left: 20px;
            margin: 10px 0 0 0;
            list-style-type: disc;
        }
         .summary-suggestions li, .advance-tax-alert li {
            margin-bottom: 8px;
        }
        .button-container {
            text-align: center;
            margin-top: 20px;
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        #resetBtn { background-color: #757575; }
        #resetBtn:hover { background-color: #616161; }
        #downloadPdfBtn { background-color: #5c6bc0; }
        #downloadPdfBtn:hover { background-color: #3f51b5; }
        #downloadExcelBtn { background-color: #4caf50; }
        #downloadExcelBtn:hover { background-color: #388e3c; }
        .highlight-winner {
            color: #4caf50;
            font-weight: 700;
        }
        #housePropertyLetOutDetails {
            display: none; /* Hidden by default */
        }
        .error-message {
            color: #d32f2f;
            font-size: 0.8em;
            text-align: right;
            width: 100%;
            display: none;
        }
        .charts-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 30px;
            align-items: center;
        }
        .chart-wrapper {
             position: relative;
        }
        .chart-placeholder {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #aaa;
            font-style: italic;
        }
        .info-icon {
            display: inline-block;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background-color: #ccc;
            color: white;
            text-align: center;
            font-size: 12px;
            line-height: 18px;
            cursor: pointer;
            margin-left: 5px;
            font-weight: bold;
        }
        .modal {
            display: none; 
            position: fixed; 
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto; 
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px 30px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 10px;
            position: relative;
        }
        .modal-close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .modal-close:hover { color: #000; }
        .modal h3 { color: #1a237e; }
        .cheaper-label {
            background-color: #4caf50;
            color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.7em;
            font-weight: bold;
            margin-left: 10px;
            vertical-align: middle;
        }

        @media (max-width: 768px) {
            .calculator-grid, .charts-container {
                grid-template-columns: 1fr;
            }
            label { flex-basis: 50%; }
        }
    </style>
</head>
<body>

<div class="container">
    <h1>Income Tax Calculator (FY 2025-26)</h1>

    <div class="calculator-grid">
        <div class="input-section">
            <div class="accordion-section active">
                <h3 class="accordion-header">Your Income</h3>
                <div class="accordion-content">
                    <div class="form-group">
                        <label for="grossSalary">Gross Annual Salary <span class="info-icon" data-key="grossSalary">?</span></label>
                        <input type="number" id="grossSalary" placeholder="e.g., 1200000">
                    </div>
                     <div class="form-group">
                        <label for="basicSalary">Basic Annual Salary <span class="info-icon" data-key="basicSalary">?</span></label>
                        <input type="number" id="basicSalary" placeholder="e.g., 600000">
                    </div>
                    <div id="salaryError" class="error-message">Basic salary cannot exceed Gross Salary.</div>
                    <div class="form-group">
                        <label for="otherIncome">Other Income (Freelance, etc.) <span class="info-icon" data-key="otherIncome">?</span></label>
                        <input type="number" id="otherIncome" placeholder="e.g., 50000">
                    </div>
                    <div class="form-group">
                        <label for="savingsInterest">Interest from Savings Accounts <span class="info-icon" data-key="savingsInterest">?</span></label>
                        <input type="number" id="savingsInterest" placeholder="e.g., 12000">
                    </div>
                    <div class="form-group">
                        <label for="stcg">Short-Term Gains (STCG @ 15%) <span class="info-icon" data-key="stcg">?</span></label>
                        <input type="number" id="stcg" placeholder="e.g., 20000">
                    </div>
                    <div class="form-group">
                        <label for="ltcg">Long-Term Gains (LTCG > 1L @ 10%) <span class="info-icon" data-key="ltcg">?</span></label>
                        <input type="number" id="ltcg" placeholder="e.g., 150000">
                    </div>
                </div>
            </div>

            <div class="accordion-section">
                 <h3 class="accordion-header">House Property Details</h3>
                 <div class="accordion-content">
                    <div class="form-group">
                        <label>Property Type</label>
                        <span>
                            <input type="radio" id="prop_self" name="propertyType" value="self" checked> <label for="prop_self">Self-Occupied</label>
                            <input type="radio" id="prop_rented" name="propertyType" value="rented"> <label for="prop_rented">Let-Out</label>
                        </span>
                    </div>
                    <div id="housePropertyLetOutDetails">
                         <div class="form-group">
                            <label for="rentReceived">Annual Rent Received</label>
                            <input type="number" id="rentReceived" placeholder="e.g., 240000">
                        </div>
                         <div class="form-group">
                            <label for="municipalTaxes">Municipal Taxes Paid</label>
                            <input type="number" id="municipalTaxes" placeholder="e.g., 10000">
                        </div>
                    </div>
                     <div class="form-group">
                        <label for="homeLoan">Home Loan Interest (Sec 24) <span class="info-icon" data-key="homeLoan">?</span></label>
                        <input type="number" id="homeLoan" placeholder="e.g., 200000">
                    </div>
                </div>
            </div>

            <div class="accordion-section">
                <h3 class="accordion-header">HRA Exemption Details (Old Regime)</h3>
                 <div class="accordion-content">
                     <div class="form-group">
                        <label for="hraReceived">HRA Received from Employer <span class="info-icon" data-key="hraReceived">?</span></label>
                        <input type="number" id="hraReceived" placeholder="e.g., 300000">
                    </div>
                     <div class="form-group">
                        <label for="rentPaid">Total Annual Rent Paid</label>
                        <input type="number" id="rentPaid" placeholder="e.g., 360000">
                    </div>
                    <div class="form-group">
                        <label for="isMetro">Living in a Metro City?</label>
                        <input type="checkbox" id="isMetro">
                    </div>
                </div>
            </div>

            <div class="accordion-section">
                <h3 class="accordion-header">Deductions (Old Regime)</h3>
                <div class="accordion-content">
                    <div class="form-group">
                        <label for="isSenior">Are you a Senior Citizen (> 60)?</label>
                        <input type="checkbox" id="isSenior">
                    </div>
                    <div class="form-group">
                        <label for="sec80c">Section 80C (EPF, PPF, ELSS) <span class="info-icon" data-key="sec80c">?</span></label>
                        <input type="number" id="sec80c" placeholder="e.g., 150000">
                    </div>
                    <div class="form-group">
                        <label for="sec80e">Interest on Education Loan (Sec 80E) <span class="info-icon" data-key="sec80e">?</span></label>
                        <input type="number" id="sec80e" placeholder="e.g., 25000">
                    </div>
                    <div class="form-group">
                        <label for="sec80d">Section 80D (Health Insurance) <span class="info-icon" data-key="sec80d">?</span></label>
                        <select id="healthInsuranceType">
                            <option value="self_normal">Self/Family (< 60 yrs)</option>
                            <option value="self_senior">Self/Family (> 60 yrs)</option>
                            <option value="both_normal">Self (< 60) + Parents (< 60)</option>
                            <option value="both_mixed">Self (< 60) + Parents (> 60)</option>
                            <option value="both_senior">Self (> 60) + Parents (> 60)</option>
                        </select>
                    </div>
                     <div class="form-group">
                        <label for="sec80dAmount">Amount Paid for Health Insurance</label>
                        <input type="number" id="sec80dAmount" placeholder="e.g., 25000">
                    </div>
                    <div class="form-group">
                        <label for="nps">NPS (Sec 80CCD-1B) <span class="info-icon" data-key="nps">?</span></label>
                        <input type="number" id="nps" placeholder="e.g., 50000">
                    </div>
                </div>
            </div>

            <div class="accordion-section">
                 <h3 class="accordion-header">Taxes Paid</h3>
                 <div class="accordion-content">
                     <div class="form-group">
                        <label for="tds">TDS Deducted (by employer, etc.) <span class="info-icon" data-key="tds">?</span></label>
                        <input type="number" id="tds" placeholder="e.g., 100000">
                    </div>
                </div>
            </div>

             <div class="button-container">
                <button id="resetBtn">Reset</button>
                <button id="downloadPdfBtn">Download Report (PDF)</button>
                <button id="downloadExcelBtn">Download Report (Excel)</button>
            </div>
        </div>

        <div class="output-section">
            <h2>Tax Calculation Summary</h2>
            <table class="results-table">
                <thead>
                    <tr>
                        <th>Particulars</th>
                        <th>Old Regime (₹)</th>
                        <th>New Regime (₹)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Gross Income (Excl. HP Loss)</td>
                        <td id="grossIncomeOld">0</td>
                        <td id="grossIncomeNew">0</td>
                    </tr>
                    <tr>
                        <td>Less: Loss from House Property</td>
                        <td id="hpLossOld">0</td>
                        <td>N/A</td>
                    </tr>
                    <tr>
                        <td>Less: HRA Exemption</td>
                        <td id="hraExemptionOld">0</td>
                        <td>N/A</td>
                    </tr>
                    <tr>
                        <td><strong>Gross Total Income</strong></td>
                        <td id="gtiOld"><strong>0</strong></td>
                        <td id="gtiNew"><strong>0</strong></td>
                    </tr>
                    <tr>
                        <td>Less: Total Deductions</td>
                        <td id="deductionsOld">0</td>
                        <td id="deductionsNew">0</td>
                    </tr>
                    <tr>
                        <td><strong>Taxable Income</strong></td>
                        <td id="taxableIncomeOld"><strong>0</strong></td>
                        <td id="taxableIncomeNew"><strong>0</strong></td>
                    </tr>
                    <tr>
                        <td>Income Tax (Slabs)</td>
                        <td id="taxOld">0</td>
                        <td id="taxNew">0</td>
                    </tr>
                     <tr>
                        <td>Tax on Capital Gains</td>
                        <td id="capitalGainsTax" colspan="2" style="text-align:center;">0</td>
                    </tr>
                     <tr class="final-tax">
                        <td>Total Tax Payable</td>
                        <td id="totalTaxPayableOld">0</td>
                        <td id="totalTaxPayableNew">0</td>
                    </tr>
                     <tr>
                        <td>Less: TDS Deducted</td>
                        <td id="tdsPaidOld">0</td>
                        <td id="tdsPaidNew">0</td>
                    </tr>
                    <tr class="final-tax">
                        <td>Net Tax Payable / (Refund)</td>
                        <td id="netTaxOld">0</td>
                        <td id="netTaxNew">0</td>
                    </tr>
                    <tr>
                        <td><strong>Effective Tax Rate</strong></td>
                        <td id="effectiveRateOld"><strong>0.00%</strong></td>
                        <td id="effectiveRateNew"><strong>0.00%</strong></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    
    <div class="summary" id="summaryBox">
        Enter your details to see the comparison.
    </div>

    <div class="charts-container">
        <div class="chart-wrapper">
            <canvas id="regimeComparisonChart"></canvas>
        </div>
        <div class="chart-wrapper">
            <canvas id="deductionBreakdownChart"></canvas>
            <div id="deductionChartPlaceholder" class="chart-placeholder">No Deductions Claimed</div>
        </div>
    </div>
</div>

<!-- Modal for Explanations -->
<div id="infoModal" class="modal">
    <div class="modal-content">
        <span class="modal-close">&times;</span>
        <h3 id="modalTitle"></h3>
        <p id="modalText"></p>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', () => {
        const { jsPDF } = window.jspdf;
        let regimeChart, deductionChart; // Chart instances

        const explanations = {
            grossSalary: { title: "Gross Annual Salary", text: "This is your total salary before any deductions like EPF, professional tax, etc. It includes your basic salary, HRA, and all allowances. Find this on your payslip or Form 16." },
            basicSalary: { title: "Basic Annual Salary", text: "This is the fixed, core component of your salary, excluding any allowances. It's typically 40-50% of your Gross Salary and is used for HRA calculation. Find this on your payslip." },
            otherIncome: { title: "Other Income", text: "This includes income from sources other than salary, such as freelancing income, professional fees, or any other earnings not subject to TDS under salary." },
            savingsInterest: { title: "Interest from Savings Accounts", text: "Enter the total interest earned from all your savings bank accounts during the financial year. This is used for deductions under Sec 80TTA (up to ₹10,000) or 80TTB (for senior citizens, up to ₹50,000)." },
            stcg: { title: "Short-Term Capital Gains (STCG)", text: "Enter gains from selling shares or equity mutual funds held for less than one year. This is taxed at a flat rate of 15%." },
            ltcg: { title: "Long-Term Capital Gains (LTCG)", text: "Enter gains from selling shares or equity mutual funds held for more than one year. Gains over ₹1,00,000 are taxed at 10%." },
            homeLoan: { title: "Home Loan Interest (Sec 24)", text: "Enter the total interest paid on your home loan. For a self-occupied property, the deduction is capped at ₹2,00,000. For a rented property, the entire interest can be claimed against rental income." },
            hraReceived: { title: "HRA Received from Employer", text: "House Rent Allowance (HRA) is a component of your salary provided by your employer for your rental accommodation. Find this amount in your payslip." },
            sec80c: { title: "Section 80C", text: "This section allows deductions up to ₹1,50,000 for various investments and expenses, including EPF, PPF, ELSS mutual funds, life insurance premiums, and home loan principal repayment." },
            sec80e: { title: "Section 80E (Education Loan)", text: "You can claim a deduction for the total interest paid on a loan taken for higher education for yourself, your spouse, or your children. There is no upper limit on the amount." },
            sec80d: { title: "Section 80D (Health Insurance)", text: "This allows deductions for health insurance premiums. The limit is ₹25,000 for self/family and another ₹25,000 for parents. If the person is a senior citizen, the limit increases to ₹50,000 for them." },
            nps: { title: "NPS (Sec 80CCD-1B)", text: "An additional deduction of up to ₹50,000 is available for contributions to the National Pension System (NPS). This is over and above the ₹1,50,000 limit of Section 80C." },
            tds: { title: "TDS Deducted", text: "Tax Deducted at Source (TDS) is the tax already paid on your behalf by your employer or other entities. This amount will be subtracted from your total tax liability. Find this in your Form 16 or Form 26AS." }
        };

        function formatToINR(num) {
            const rounded = Math.round(num);
            if (rounded < 0) return `(${new Intl.NumberFormat('en-IN').format(Math.abs(rounded))})`;
            return new Intl.NumberFormat('en-IN').format(rounded);
        }
        
        let lastCalculation = { inputs: {}, results: {} };
        
        function debounce(func, delay) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), delay);
            };
        }

        function getInputs() {
            const parse = (id) => Math.max(0, parseFloat(document.getElementById(id)?.value) || 0);
            return {
                grossSalary: parse('grossSalary'), basicSalary: parse('basicSalary'),
                otherIncome: parse('otherIncome'), savingsInterest: parse('savingsInterest'),
                stcg: parse('stcg'), ltcg: parse('ltcg'),
                propertyType: document.querySelector('input[name="propertyType"]:checked').value,
                rentReceived: parse('rentReceived'), municipalTaxes: parse('municipalTaxes'), homeLoan: parse('homeLoan'),
                hraReceived: parse('hraReceived'), rentPaid: parse('rentPaid'),
                isMetro: document.getElementById('isMetro').checked, isSenior: document.getElementById('isSenior').checked,
                sec80c: parse('sec80c'), sec80e: parse('sec80e'),
                sec80dAmount: parse('sec80dAmount'), healthInsuranceType: document.getElementById('healthInsuranceType').value,
                nps: parse('nps'), tds: parse('tds'),
            };
        }
        
        function calculateSlabTax(income, isOldRegime) {
            if (isOldRegime) {
                if (income <= 250000) return 0;
                if (income <= 500000) return (income - 250000) * 0.05;
                if (income <= 1000000) return 12500 + (income - 500000) * 0.20;
                return 112500 + (income - 1000000) * 0.30;
            }
            if (income <= 300000) return 0;
            if (income <= 600000) return (income - 300000) * 0.05;
            if (income <= 900000) return 15000 + (income - 600000) * 0.10;
            if (income <= 1200000) return 45000 + (income - 900000) * 0.15;
            if (income <= 1500000) return 90000 + (income - 1200000) * 0.20;
            return 150000 + (income - 1500000) * 0.30;
        }

        function performCalculations(inputs) {
            let incomeFromHPOld = 0, incomeFromHPNew = 0;
            if (inputs.propertyType === 'self') {
                incomeFromHPOld = -Math.min(inputs.homeLoan, 200000);
            } else {
                const nav = inputs.rentReceived - inputs.municipalTaxes;
                const incomeHP = nav - (nav * 0.3) - inputs.homeLoan;
                incomeFromHPOld = incomeHP; 
                incomeFromHPNew = Math.max(0, incomeHP);
            }
            const hpLossSetOff = Math.min(0, incomeFromHPOld) < -200000 ? -200000 : Math.min(0, incomeFromHPOld);

            const otherIncomesTotal = inputs.otherIncome + inputs.savingsInterest + inputs.stcg + inputs.ltcg;
            let hraExemption = 0;
            if (inputs.basicSalary > 0 && inputs.rentPaid > 0 && inputs.hraReceived > 0) {
                hraExemption = Math.min(inputs.hraReceived, inputs.isMetro ? inputs.basicSalary * 0.5 : inputs.basicSalary * 0.4, Math.max(0, inputs.rentPaid - (inputs.basicSalary * 0.1)));
            }

            const capitalGainsTax = (inputs.stcg * 0.15) + (Math.max(0, inputs.ltcg - 100000) * 0.10);
            const grossIncomePositive = inputs.grossSalary + otherIncomesTotal + Math.max(0, incomeFromHPOld);
            
            const standardDeduction = inputs.grossSalary > 0 ? 50000 : 0;
            const ded80c = Math.min(inputs.sec80c, 150000);
            const ded80e = inputs.sec80e;
            let max80d;
            switch (inputs.healthInsuranceType) {
                case 'self_senior': max80d = 50000; break; case 'both_normal': max80d = 50000; break; case 'both_mixed': max80d = 75000; break; case 'both_senior': max80d = 100000; break; default: max80d = 25000;
            }
            const ded80d = Math.min(inputs.sec80dAmount, max80d);
            const dedNps = Math.min(inputs.nps, 50000);
            const ded80TTA_TTB = inputs.isSenior ? Math.min(inputs.savingsInterest, 50000) : Math.min(inputs.savingsInterest, 10000);

            const gtiOld = grossIncomePositive + hpLossSetOff - hraExemption;
            const totalDeductionsOld = standardDeduction + ded80c + ded80d + dedNps + ded80TTA_TTB + ded80e;
            const taxableIncomeOld = Math.max(0, gtiOld - totalDeductionsOld);
            let taxFromSlabOld = calculateSlabTax(Math.max(0, taxableIncomeOld - inputs.stcg - inputs.ltcg), true);
            if (taxableIncomeOld <= 500000) taxFromSlabOld = 0;
            const totalTaxPayableOld = (taxFromSlabOld + capitalGainsTax) * 1.04;
            const netTaxOld = totalTaxPayableOld - inputs.tds;
            const effectiveRateOld = grossIncomePositive > 0 ? (totalTaxPayableOld / grossIncomePositive) * 100 : 0;

            const gtiNew = inputs.grossSalary + otherIncomesTotal + incomeFromHPNew;
            const taxableIncomeNew = Math.max(0, gtiNew - standardDeduction);
            let taxFromSlabNew = calculateSlabTax(Math.max(0, taxableIncomeNew - inputs.stcg - inputs.ltcg), false);
            if (taxableIncomeNew <= 700000) taxFromSlabNew = 0;
            const totalTaxPayableNew = (taxFromSlabNew + capitalGainsTax) * 1.04;
            const netTaxNew = totalTaxPayableNew - inputs.tds;
            const effectiveRateNew = grossIncomePositive > 0 ? (totalTaxPayableNew / grossIncomePositive) * 100 : 0;
            
            return {
                grossIncomePositive, gtiNew, hpLossSetOff, hraExemption, gtiOld, totalDeductionsOld, totalDeductionsNew: standardDeduction, taxableIncomeOld, taxableIncomeNew, capitalGainsTax, taxFromSlabOld, taxFromSlabNew, totalTaxPayableOld, totalTaxPayableNew, tds: inputs.tds, netTaxOld, netTaxNew, effectiveRateOld, effectiveRateNew,
                deductionsBreakdown: { "80C": ded80c, "80D": ded80d, "NPS (80CCD-1B)": dedNps, HRA: hraExemption, "Std Deduction": standardDeduction, "HP Loss Set-off": Math.abs(hpLossSetOff) }
            };
        }

        function updateUI(results) {
            updateUITable(results);
            generateSummary(results);
            renderCharts(results);
        }
        
        function updateUITable(r) {
            document.getElementById('grossIncomeOld').innerText = formatToINR(r.grossIncomePositive);
            document.getElementById('grossIncomeNew').innerText = formatToINR(r.gtiNew > 0 ? r.gtiNew : r.grossIncomePositive);
            document.getElementById('hpLossOld').innerText = formatToINR(r.hpLossSetOff);
            document.getElementById('hraExemptionOld').innerText = formatToINR(r.hraExemption);
            document.getElementById('gtiOld').innerText = formatToINR(Math.max(0, r.gtiOld));
            document.getElementById('gtiNew').innerText = formatToINR(Math.max(0, r.gtiNew));
            document.getElementById('deductionsOld').innerText = formatToINR(r.totalDeductionsOld);
            document.getElementById('deductionsNew').innerText = formatToINR(r.totalDeductionsNew);
            document.getElementById('taxableIncomeOld').innerText = formatToINR(r.taxableIncomeOld);
            document.getElementById('taxableIncomeNew').innerText = formatToINR(r.taxableIncomeNew);
            document.getElementById('capitalGainsTax').innerText = formatToINR(r.capitalGainsTax);
            document.getElementById('taxOld').innerText = formatToINR(r.taxFromSlabOld);
            document.getElementById('taxNew').innerText = formatToINR(r.taxFromSlabNew);
            document.getElementById('totalTaxPayableOld').innerText = formatToINR(r.totalTaxPayableOld);
            document.getElementById('totalTaxPayableNew').innerText = formatToINR(r.totalTaxPayableNew);
            document.getElementById('tdsPaidOld').innerText = formatToINR(r.tds);
            document.getElementById('tdsPaidNew').innerText = formatToINR(r.tds);
            
            const netTaxOldEl = document.getElementById('netTaxOld');
            netTaxOldEl.innerText = formatToINR(r.netTaxOld);
            netTaxOldEl.className = r.netTaxOld < 0 ? 'refund' : 'payable';
            const netTaxNewEl = document.getElementById('netTaxNew');
            netTaxNewEl.innerText = formatToINR(r.netTaxNew);
            netTaxNewEl.className = r.netTaxNew < 0 ? 'refund' : 'payable';
            
            document.getElementById('effectiveRateOld').innerText = `${r.effectiveRateOld.toFixed(2)}%`;
            document.getElementById('effectiveRateNew').innerText = `${r.effectiveRateNew.toFixed(2)}%`;
        }

        function generateSummary(results) {
            const { totalTaxPayableOld, totalTaxPayableNew, taxableIncomeOld } = results;
            const summaryBox = document.getElementById('summaryBox');
            let summaryText = '';
            let cheaperLabel = `<span class="cheaper-label">CHEAPER</span>`;

            const totalTaxOldEl = document.getElementById('totalTaxPayableOld');
            const totalTaxNewEl = document.getElementById('totalTaxPayableNew');
            totalTaxOldEl.classList.remove('highlight-winner', 'payable');
            totalTaxNewEl.classList.remove('highlight-winner', 'payable');
            
            if (totalTaxPayableOld > 10000) totalTaxOldEl.classList.add('payable');
            if (totalTaxPayableNew > 10000) totalTaxNewEl.classList.add('payable');

            if (totalTaxPayableNew < totalTaxPayableOld) {
                const savings = totalTaxPayableOld - totalTaxPayableNew;
                summaryBox.className = 'summary';
                summaryText = `<div class="summary-recommendation">The <strong>New Regime</strong> is better. You save <strong>₹ ${formatToINR(savings)}</strong>. ${cheaperLabel}</div>`;
                totalTaxNewEl.classList.add('highlight-winner');
            } else if (totalTaxPayableOld < totalTaxPayableNew) {
                const savings = totalTaxPayableNew - totalTaxPayableOld;
                summaryBox.className = 'summary old-regime';
                summaryText = `<div class="summary-recommendation">The <strong>Old Regime</strong> is better. You save <strong>₹ ${formatToINR(savings)}</strong>. ${cheaperLabel}</div>`;
                totalTaxOldEl.classList.add('highlight-winner');
            } else {
                summaryBox.className = 'summary';
                summaryText = `<div class="summary-recommendation">Both regimes result in the same tax. The <strong>New Regime</strong> is simpler.</div>`;
            }

            let suggestions = [];
            const createSuggestion = (shortfall, section, investmentType) => {
                if (shortfall <= 0) return;
                const taxSaved = (calculateSlabTax(taxableIncomeOld, true) - calculateSlabTax(taxableIncomeOld - shortfall, true)) * 1.04;
                if (taxSaved > 0) suggestions.push(`Invest ₹${formatToINR(shortfall)} more in ${section} (${investmentType}) to save approx. ₹${formatToINR(taxSaved)} tax.`);
            };
            createSuggestion(150000 - results.deductionsBreakdown['80C'], 'Sec 80C', 'ELSS, PPF');
            createSuggestion(50000 - results.deductionsBreakdown['NPS (80CCD-1B)'], 'NPS (80CCD-1B)', 'Tier 1');
            if (suggestions.length > 0 && totalTaxPayableOld <= totalTaxPayableNew) {
                summaryText += `<div class="summary-suggestions"><b>Tax Planning Suggestions (Old Regime):</b><ul><li>${suggestions.join("</li><li>")}</li></ul></div>`;
            }
            
            let advanceTaxNotes = [];
            if (totalTaxPayableOld > 10000) advanceTaxNotes.push("<b>Old Regime:</b> Advance tax liability exists.");
            if (totalTaxPayableNew > 10000) advanceTaxNotes.push("<b>New Regime:</b> Advance tax liability exists.");
            if (advanceTaxNotes.length > 0) summaryText += `<div class="advance-tax-alert"><b>Advance Tax Alert:</b><ul><li>${advanceTaxNotes.join("</li><li>")}</li></ul></div>`;

            summaryBox.innerHTML = summaryText;
            lastCalculation.summaryHTML = summaryText;
        }
        
        function renderCharts(results) {
            const { totalTaxPayableOld, totalTaxPayableNew, deductionsBreakdown } = results;
            const barCtx = document.getElementById('regimeComparisonChart')?.getContext('2d');
            const pieCtx = document.getElementById('deductionBreakdownChart')?.getContext('2d');
            if (!barCtx || !pieCtx) return;

            const piePlaceholder = document.getElementById('deductionChartPlaceholder');

            if(regimeChart) regimeChart.destroy();
            regimeChart = new Chart(barCtx, { type: 'bar', data: { labels: ['Old Regime', 'New Regime'], datasets: [{ label: 'Total Tax Payable (₹)', data: [totalTaxPayableOld, totalTaxPayableNew], backgroundColor: ['#3f51b5', '#4caf50'] }] }, options: { responsive: true, plugins: { title: { display: true, text: 'Regime Comparison' } } } });

            const deductionData = Object.values(deductionsBreakdown).filter(v => v > 0);
            if(deductionChart) deductionChart.destroy();
            if (deductionData.length > 0) {
                piePlaceholder.style.display = 'none';
                deductionChart = new Chart(pieCtx, { type: 'pie', data: { labels: Object.keys(deductionsBreakdown).filter(k => deductionsBreakdown[k] > 0), datasets: [{ data: deductionData, hoverOffset: 4 }] }, options: { responsive: true, plugins: { title: { display: true, text: 'Deduction Breakdown (Old Regime)' } } } });
            } else { piePlaceholder.style.display = 'block'; }
        }
        
        function calculateAndDisplay() {
            const inputs = getInputs();
            const results = performCalculations(inputs);
            updateUI(results);
            lastCalculation = { inputs, results };
        }

        function downloadPDF() {
            try {
                if (!lastCalculation.results) {
                    alert("Please perform a calculation first.");
                    return;
                }
                const doc = new jsPDF();
                const { results, inputs } = lastCalculation;
                
                doc.setFont("helvetica", "bold"); doc.setFontSize(16); doc.text("Income Tax Report (FY 2025-26)", 105, 15, { align: "center" });
                let y = 30;
                const addLine = (label, value, valueColor = '#000000') => { doc.setFont("helvetica", "normal"); doc.setTextColor('#333333'); doc.text(label, 15, y); doc.setTextColor(valueColor); doc.text(value, 195, y, {align: "right"}); y += 7; doc.setTextColor('#000000'); };
                const addSection = (title) => { y += 5; doc.setFont("helvetica", "bold"); doc.text(title, 15, y); y += 8; };
                
                addSection("Income & Deduction Inputs:");
                Object.keys(inputs).forEach(key => {
                    if (typeof inputs[key] === 'number') {
                        addLine(key, `₹ ${formatToINR(inputs[key])}`);
                    }
                });
                y += 5; doc.setLineWidth(0.5); doc.line(15, y - 5, 195, y-5);
                
                addSection("Calculation Summary:");
                addLine("Gross Income (Excl. HP Loss)", `₹ ${formatToINR(results.grossIncomePositive)}`);
                addLine("HP Loss Set-off (Old Regime)", `₹ ${formatToINR(results.deductionsBreakdown['HP Loss Set-off'])}`);
                addLine("HRA Exemption (Old Regime)", `₹ ${formatToINR(results.deductionsBreakdown.HRA)}`);
                addLine("Gross Total Income (Old Regime)", `₹ ${formatToINR(results.gtiOld)}`);
                addLine("Gross Total Income (New Regime)", `₹ ${formatToINR(results.gtiNew)}`);
                addLine("Total Deductions (Old Regime)", `₹ ${formatToINR(results.totalDeductionsOld)}`);
                y += 2;
                doc.setFont("helvetica", "bold");
                addLine("Total Tax Payable (Old Regime):", `₹ ${formatToINR(results.totalTaxPayableOld)}`);
                addLine("Total Tax Payable (New Regime):", `₹ ${formatToINR(results.totalTaxPayableNew)}`);
                y += 2;
                addLine("Net Payable / (Refund) - Old:", `₹ ${formatToINR(results.netTaxOld)}`, results.netTaxOld < 0 ? '#4caf50' : '#d32f2f');
                addLine("Net Payable / (Refund) - New:", `₹ ${formatToINR(results.netTaxNew)}`, results.netTaxNew < 0 ? '#4caf50' : '#d32f2f');
                y += 5;
                doc.setLineWidth(0.5); doc.line(15, y - 5, 195, y-5);
                
                addSection("Recommendation & Suggestions:");
                const summaryDiv = document.createElement('div');
                summaryDiv.innerHTML = lastCalculation.summaryHTML;
                doc.html(summaryDiv, {
                    callback: function (doc) { doc.save('Income_Tax_Report_FY2025-26.pdf'); },
                    x: 15, y: y, width: 180, windowWidth: 650
                });
            } catch (e) {
                console.error("Failed to generate PDF:", e);
                alert("Sorry, there was an error generating the PDF report.");
            }
        }

        function downloadExcel() {
             if (!lastCalculation.results || typeof lastCalculation.results.taxableIncomeNew === 'undefined') {
                alert("Please perform a calculation first.");
                return;
            }
            const { inputs, results } = lastCalculation;
            const inputData = Object.keys(inputs).map(k => ({ Item: k, Value: inputs[k]}));
            const summaryData = [
                { Particulars: "Gross Income (Excl. HP Loss)", "Old Regime (₹)": results.grossIncomePositive, "New Regime (₹)": results.grossIncomePositive }, { Particulars: "Loss from House Property", "Old Regime (₹)": results.deductionsBreakdown['HP Loss Set-off'], "New Regime (₹)": "N/A" },
                { Particulars: "HRA Exemption", "Old Regime (₹)": results.deductionsBreakdown.HRA, "New Regime (₹)": "N/A" }, { Particulars: "Gross Total Income", "Old Regime (₹)": results.gtiOld, "New Regime (₹)": results.gtiNew },
                { Particulars: "Total Deductions", "Old Regime (₹)": results.totalDeductionsOld, "New Regime (₹)": results.totalDeductionsNew }, { Particulars: "Taxable Income", "Old Regime (₹)": results.taxableIncomeOld, "New Regime (₹)": results.taxableIncomeNew },
                { Particulars: "Total Tax Payable", "Old Regime (₹)": results.totalTaxPayableOld, "New Regime (₹)": results.totalTaxPayableNew }, { Particulars: "Net Tax / (Refund)", "Old Regime (₹)": results.netTaxOld, "New Regime (₹)": results.netTaxNew },
                { Particulars: "Effective Tax Rate", "Old Regime (₹)": `${results.effectiveRateOld.toFixed(2)}%`, "New Regime (₹)": `${results.effectiveRateNew.toFixed(2)}%` },
            ];

            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(inputData), "User Inputs");
            XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(summaryData), "Tax Calculation Summary");
            
            const finalTaxLiability = Math.min(results.totalTaxPayableOld, results.totalTaxPayableNew);
            if (finalTaxLiability > 10000) {
                const installmentData = [
                    { "Due Date": "By 15th June", "Cumulative %": "15%", "Amount (₹)": finalTaxLiability * 0.15 }, { "Due Date": "By 15th September", "Cumulative %": "45%", "Amount (₹)": finalTaxLiability * 0.30 },
                    { "Due Date": "By 15th December", "Cumulative %": "75%", "Amount (₹)": finalTaxLiability * 0.30 }, { "Due Date": "By 15th March", "Cumulative %": "100%", "Amount (₹)": finalTaxLiability * 0.25 }
                ];
                XLSX.utils.book_append_sheet(wb, XLSX.utils.json_to_sheet(installmentData), "Advance Tax Installments");
            }
            
            XLSX.writeFile(wb, "Income_Tax_Report_FY2025-26.xlsx");
        }

        function resetApp() {
            document.querySelectorAll('.input-section input[type="number"]').forEach(input => input.value = '');
            document.querySelectorAll('.input-section input[type="checkbox"]').forEach(input => input.checked = false);
            document.getElementById('healthInsuranceType').selectedIndex = 0; 
            document.getElementById('prop_self').checked = true;
            if(regimeChart) regimeChart.destroy(); 
            if(deductionChart) deductionChart.destroy();
            document.getElementById('deductionChartPlaceholder').style.display = 'block';
            toggleHousePropertyDetails();
        }
        
        function toggleHousePropertyDetails() {
            const propertyType = document.querySelector('input[name="propertyType"]:checked').value;
            document.getElementById('housePropertyLetOutDetails').style.display = propertyType === 'rented' ? 'block' : 'none';
            calculateAndDisplay();
        }

        // --- Event Listeners and Initial Setup ---
        const debouncedCalc = debounce(calculateAndDisplay, 400);
        document.querySelectorAll('.input-section input, .input-section select').forEach(el => {
            el.addEventListener('input', debouncedCalc);
        });
        
        document.querySelectorAll('input[name="propertyType"]').forEach(radio => {
            radio.addEventListener('change', toggleHousePropertyDetails);
        });

        const modal = document.getElementById('infoModal');
        document.querySelector('.input-section').addEventListener('click', function(e) {
            if (e.target.classList.contains('info-icon')) {
                const key = e.target.dataset.key;
                if (explanations[key]) {
                    document.getElementById('modalTitle').innerText = explanations[key].title;
                    document.getElementById('modalText').innerText = explanations[key].text;
                    modal.style.display = 'block';
                }
            }
        });
        document.querySelector('.modal-close').onclick = () => modal.style.display = 'none';
        window.onclick = (e) => { if (e.target == modal) modal.style.display = 'none'; }

        document.querySelectorAll('.accordion-header').forEach(header => {
            header.addEventListener('click', () => {
                const currentActive = document.querySelector('.accordion-section.active');
                const section = header.parentElement;
                if (currentActive && currentActive !== section) {
                    currentActive.classList.remove('active');
                    currentActive.querySelector('.accordion-content').style.maxHeight = null;
                }
                section.classList.toggle('active');
                const content = header.nextElementSibling;
                content.style.maxHeight = content.style.maxHeight ? null : content.scrollHeight + "px";
            });
        });
        
        document.getElementById('resetBtn').addEventListener('click', resetApp);
        document.getElementById('downloadPdfBtn').addEventListener('click', downloadPDF);
        document.getElementById('downloadExcelBtn').addEventListener('click', downloadExcel);

        // Initial setup
        document.querySelector('.accordion-content').style.maxHeight = document.querySelector('.accordion-content').scrollHeight + "px";
        toggleHousePropertyDetails();
    });
</script>

</body>
</html>

